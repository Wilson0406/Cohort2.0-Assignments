/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const fs = require("fs");
const app = express();

// let todos = fs.readFileSync("todos.json", "utf-8");
// app.use(bodyParser.json());
// let todosJ = JSON.parse(todos);

// app.get("/todos", (req,res) => {
//   // todos = JSON.stringify(todosJ);
//   // fs.writeFileSync("week-2/02-nodejs/todos.json", todos, "utf-8");
//   res.status(200).send(todosJ);
// })

// app.get("/todos/:id", (req,res) => {
//   let found = false;
//   for(let i = 0; i < todosJ.length; i++) {
//     if(todosJ[i]["id"] == req.params.id) {
//       found = true;
//       res.status(200).send(todosJ[i]);
//     }
//   }
//   if(!found) {
//     res.status(404).send("TODO not found!");
//   }
// })

// app.post("/todos", (req,res) => {
//   title = req.body.title;
//   completed = req.body.completed;
//   description = req.body.description;
//   todosJ.push({
//     id: todosJ.length + 1,
//     title: title,
//     completed: completed,
//     description: description,
//   })
//   todos = JSON.stringify(todosJ);
//   fs.writeFileSync("todos.json", todos, "utf-8");
//   res.status(200).send("Created TODO.")
// })

// app.put("/todos/:id", (req, res) => {
//   let id = req.params.id;
//   let description = req.body.description;
//   let title = req.body.title;
//   let completed = req.body.completed;
//   let found = false;
//   for(let i = 0; i < todosJ.length; i++) {
//     if(todosJ[i]["id"] == id) {
//       found = true;
//       todosJ[i]["title"] = title;
//       todosJ[i]["description"] = description;
//       todosJ[i]["completed"] = completed;
//       todos = JSON.stringify(todosJ);
//       fs.writeFileSync("todos.json", todos, "utf-8");
//       res.status(200).send("TODO updated");
//     }
//   }
//   if(!found) {
//     res.status(404).send("TODO not found.");
//   } 
// })

// app.delete("/todos/:id", (req, res) => {
//   let id = req.params.id;
//   let found = false;
//   for(let i = 0; i < todosJ.length; i++) {
//     if(todosJ[i]["id"] == id) {
//       found = true;
//       todosJ.splice(i, 1);
//       todos = JSON.stringify(todosJ);
//       fs.writeFileSync("todos.json", todos, "utf-8");
//       res.status(200).send("TODO found and deleted.");
//     }
//   }
//   if(!found) {
//     res.status(404).send("TODO not found.");
//   }
// })

app.use(bodyParser.json());
let todosJ = []

app.get("/todos", (req,res) => {
  res.json(todosJ);
})

app.get("/todos/:id", (req,res) => {
  const todo = todosJ.find(t => t.id === parseInt(req.params.id));
  if(!todo) {
    res.status(404).send("TODO not found!");
  } else {
      res.status(200).json(todo);
  }
})

app.post("/todos", (req,res) => {
  title = req.body.title;
  // completed = req.body.completed;
  description = req.body.description;
  const newTodo = {
    id: todosJ.length + 1,
    title: title,
    description: description
  }
  todosJ.push(newTodo)
  res.status(201).json(newTodo)
})

app.put("/todos/:id", (req, res) => {
  let id = todosJ.findIndex(t => t.id === parseInt(req.params.id));
  if(id == -1) {
    res.status(404).send("TODO not found.");
  } else {
    todosJ[id].title = req.body.title;
    todosJ[id].description = req.body.description;
    res.send(200).json(todosJ[id]);
  }
})

app.delete("/todos/:id", (req, res) => {
  const id = todosJ.findIndex(t => t.id === parseInt(req.params.id));
  if(id == -1) {
    res.status(404).send("TODO not found.");
  } else {
    todosJ.splice(id, 1);
    res.status(200).send("TODO deleted.");
  }
})

app.use((req, res, next) => {
  res.status(404).send();
});

// app.listen(3000);
module.exports = app;